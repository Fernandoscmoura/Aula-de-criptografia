import java.io.BufferedReader;
import java.io.InputStreamReader;

public class CriptoanaliseVigenere {
	private static final String CRIPTOGRAMA = "6e7f2141351d39313b293f447f3552702db2383f352a0d7f19463701701831333f407f7961351e2537322e2840313e407d3e127c72673b533a25563e0a3575382631442d7147220f3d3c2a26390d7f3f52701d35383f292a012c345425073e213b67ab013b3e13330f223b3f312a4d7371463d4e2027312d2e553071432201203a302324013e245e350024342c67240131ab5e351c3f753a226b453a2146240f343a2d672f4e2c7152241b313c2d677e106c7143311c31756b757c0f7f0256220731753f673b53363c56391c317533322f4031b65270003f7530bd26442d3e13340b703c30332e462d305d240b23753a266b623e2252700a35263a226b106668007e4e11753a2e38422a2240b3017026312539447f3013220b20273b342e4f2b3047391839313f232e013b3413330f34347e3225483b3057354e34347e212e453a2352b78d3f7530266b62bd3c52220f703bbd286bc87f3f5c260f7c75332638013071703500233a7e232e016d6101624e3d3a2d33394e2a7142250b7c753d282552363556220f3e3131672a527f3c46340f3eb23f346b513021463c0f333c31292a482c7d133102372030346b442c2552340123753b343fc2307140250c7d273b3739442c345d240f343a2d67205f013a3f42250f3e21316724542b235c234e24bf33672f442f2447310a3f267e3424432d305d34017e750e2839013c3e5d240f70313b673e4c3e7152b78d3f7533283d483b3013200b3c3a7e172a53be7d13350370676e75780d7f3e13031b20273b2a24010b235a321b3e3432670d443b34413102707d0d130d087f3556254e20273f3d24013e25da705d60753a226b4b2a3f5b3f4e20342c266b502a34133f4e133a302039442c225c701c35233b2d2a013e7157391d242737253e48b8b25c700a35753d262f44362352234e34347e042a523e7f13030b70342aae6b4dbe715c70223532373427402b38453f4e3eb631672e45362552224e25383f6727443671503f0320393b2a2e4f2b3041701d3f372c226b4e7f25563d0f7c7531671f533633463e0f3c750d323b442d385c224e15393b2e3f4e2d305f704604061b6e6b453a25562203393b3f35aa0130715daa03352731672f447f3252340b39273f346b453a7150310a31752b2922453e3556700a317518222f442d30d4b30170213b35aa01313040700b3c3037a0be442c7157354e62656c7165011622403f4e20273b2422523e23d2701d35277e212e482b3e13311ab97531323f543d235c7c4e25387e26254e7f305d240b23753a286b5133345a24017c753d28254730235e354e20273b31a1013e71703f00232137333e48b8b25c7e3d35322b292f4e7f3552340123753a286b653a2152221a31383b293f4e7f185d240b222637292f483c305f700a35751f3438442c225c220731750e26394d3e3c563e1a31277e6f0f483e211a7c4e23307e2638013c3057350722342d672d4e2d345e701c353137343f53363346bd0a31267e342e4c7f3050220b23363b293f402d715c251a22342d67254e2930407c4e333a33286b502a344170233f212a2667016e6513351d24343a2838012c3441390f3d753f212e553e355c234070053b352f442d38523d4e26343926381b7f035a3f4e34307e0d2a4f3a38413f4e78242b263f5330781f703c393a7e003940313556700a3f750d32270d7f015a311bbd797e172a533ebc51314e35751c2623483e711b341b3126776b6b713a235d310332203d286b447f105f31093f342d67635432301a7e4e1734302f2a5336305e6a4e00342ca66b447f02523e1a31751d263f402d385d314e78242b263f5330781f702f3d34242825402c711b341b3126776b6b623a3041b1427012312eaa5273717e390031267e002e533e3840700b70183f33240118235c231d3f7576322640767f";
	
	public static void main(String [] args) {
		//Primeira tarefa: testar v√°rios tamanhos chave
		for (int tamanhoChave = 1 ;
				tamanhoChave <= 20 ;
				tamanhoChave++) {
			System.out.println("==================");
			System.out.println("Testando senha de tamanho + tamanhoChave");
			
			//Segunda tarefa: dividir o criptograma em varios conjuntos
			for (int numeroConjunto = 0 ;
					numeroConjunto < tamanhoChave ;
					numeroConjunto++) {
			
				//terceira tarefa: contar a ocorrencia de cada conjunto
				int[] vetorOcorrencias = new int[256];
			for (int caractereCriptograma = 0 ;
					caractereCriptograma < CRIPTOGRAMA.length() ;
					caractereCriptograma+=2) {
				
				
				if ((caractereCriptograma / 2) % tamanhoChave == numeroConjunto) {
					vetorOcorrencias[Integer.parseInt(CRIPTOGRAMA.substring(caractereCriptograma,caractereCriptograma + 2), 16)]++;
					}
				}
				//Quarta, Quinta e sexta tarefas: 
			    //descobir o mais frequente ^ 32 e ASC
			System.out.print(numeroConjunto + ": ");
			imprimirCaractereMaisFrequente(vetorOcorrencias);
			}
		}
		while (true) {
			try {
			System.out.print("Digite a senha: ");
			decriptar(new BufferedReader(new InputStreamReader(System.in)).readLine());
		} catch (Exception erro) {
			System.out.println(erro);
		}
	}
}	
	private static void imprimirCaractereMaisFrequente(int[] vetor) {
		int caractere = 0;
		int maior = 0;
		
		for (int i = 0 ; i < 256 ; i++) {
			if (vetor[i] > maior) {
				caractere = i;
				maior = vetor[i];
				
			}
		}
		System.out.println((char) (caractere ^ 32));
	}
	private static void decriptar(String chave) {
		for (int i = 0 ; i <= CRIPTOGRAMA.length() ; i+=2) {
			int caractereCrifa = Integer.parseInt(
					CRIPTOGRAMA.substring(i, i + 2), 16);
			int caractereChave = chave.charAt((i / 2) % chave.length());
			
			System.out.print((char) (caractereCrifa ^ caractereChave));
		}
		System.out.println();
	}
}

